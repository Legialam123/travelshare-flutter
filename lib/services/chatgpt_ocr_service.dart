import 'dart:io';
import 'package:dio/dio.dart';
import 'package:image_picker/image_picker.dart';
import 'package:http_parser/http_parser.dart';
import 'package:path/path.dart' as path;
import '../models/chatgpt_ocr_response.dart';
import '../services/auth_service.dart';
import '../services/category_service.dart';
import '../models/receipt_data.dart';

class ChatGptOcrService {
  /// X√°c ƒë·ªãnh MediaType d·ª±a tr√™n file extension
  static MediaType _getMediaType(String filePath) {
    final ext = path.extension(filePath).toLowerCase();
    switch (ext) {
      case '.jpg':
      case '.jpeg':
        return MediaType('image', 'jpeg');
      case '.png':
        return MediaType('image', 'png');
      case '.gif':
        return MediaType('image', 'gif');
      case '.webp':
        return MediaType('image', 'webp');
      case '.bmp':
        return MediaType('image', 'bmp');
      default:
        // Default to JPEG if unknown
        return MediaType('image', 'jpeg');
    }
  }

  /// X·ª≠ l√Ω OCR s·ª≠ d·ª•ng ChatGPT backend (v·ªõi optimization v√† caching)
  static Future<ReceiptData> processReceiptWithChatGPT(XFile imageFile) async {
    try {
      // X√°c ƒë·ªãnh MediaType d·ª±a tr√™n file extension
      final mediaType = _getMediaType(imageFile.path);

      // Basic validation (backend s·∫Ω handle chi ti·∫øt)
      final file = File(imageFile.path);
      if (!await file.exists()) {
        throw Exception('File kh√¥ng t·ªìn t·∫°i: ${imageFile.path}');
      }

      final fileSize = await file.length();
      if (fileSize == 0) {
        throw Exception('File r·ªóng');
      }

      print('üì§ Uploading file: ${imageFile.name} (${(fileSize / 1024).toStringAsFixed(1)}KB)');

      // T·∫°o FormData v·ªõi image file
      FormData formData = FormData.fromMap({
        'file': await MultipartFile.fromFile(
          imageFile.path,
          filename: imageFile.name,
          contentType: mediaType,
        ),
      });

      // Call API using centralized AuthService.dio (auto-handles auth token)
      // Backend ƒë√£ c√≥ optimization v√† caching, timeout c√≥ th·ªÉ ng·∫Øn h∆°n
      final response = await AuthService.dio.post(
        '/ai/ocr/process-receipt',
        data: formData,
        options: Options(
          headers: {
            'Content-Type': 'multipart/form-data',
          },
          receiveTimeout: const Duration(seconds: 45), // TƒÉng ƒë·ªÉ x·ª≠ l√Ω optimization
          sendTimeout: const Duration(seconds: 15),    // Upload timeout
        ),
      );

      // Parse response
      final ocrResponse = ChatGptOcrResponse.fromJson(response.data);

      if (ocrResponse.code == 1000 && ocrResponse.result != null) {
        // Create enhanced ReceiptData v·ªõi category info
        final receiptData = ocrResponse.result!.toReceiptData();
        
        print('‚úÖ OCR th√†nh c√¥ng: ${ocrResponse.result!.merchantName} - ${ocrResponse.result!.amount}');
        return receiptData;
      } else {
        // X·ª≠ l√Ω error codes t·ª´ backend
        String errorMessage;
        switch (ocrResponse.code) {
          case 1002:
            errorMessage = 'File kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
            break;
          case 1003:
            errorMessage = ocrResponse.message ?? 'File kh√¥ng h·ª£p l·ªá (ƒë·ªãnh d·∫°ng ho·∫∑c k√≠ch th∆∞·ªõc)';
            break;
          case 1004:
            errorMessage = 'Kh√¥ng th·ªÉ x·ª≠ l√Ω OCR. Vui l√≤ng th·ª≠ l·∫°i.';
            break;
          case 1005:
            errorMessage = 'File qu√° l·ªõn (t·ªëi ƒëa 5MB). Vui l√≤ng ch·ªçn file nh·ªè h∆°n.';
            break;
          default:
            errorMessage = ocrResponse.message ?? 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
        }
        throw Exception(errorMessage);
      }
    } on DioException catch (e) {
      if (e.type == DioExceptionType.connectionTimeout ||
          e.type == DioExceptionType.receiveTimeout) {
        throw Exception('‚è±Ô∏è Timeout: OCR ƒëang b·∫≠n, vui l√≤ng th·ª≠ l·∫°i sau.');
      } else if (e.type == DioExceptionType.connectionError) {
        throw Exception('üåê Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.');
      } else if (e.response?.statusCode == 413) {
        throw Exception('üìÅ File qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n 5MB.');
      } else {
        throw Exception('‚ùå L·ªói server: ${e.response?.statusCode ?? 'Unknown'}');
      }
    } catch (e) {
      print('‚ùå OCR Error: $e');
      throw Exception('Kh√¥ng th·ªÉ x·ª≠ l√Ω h√≥a ƒë∆°n v·ªõi AI: $e');
    }
  }

  /// L·∫•y category ID t·ª´ category name
  static Future<String?> getCategoryIdFromName(
      String categoryName, int groupId) async {
    try {
      final categories =
          await CategoryService.fetchGroupExpenseCategories(groupId);

      // T√¨m exact match first
      final exactMatch =
          categories.where((cat) => cat.name == categoryName).firstOrNull;

      if (exactMatch != null) {
        return exactMatch.id.toString();
      }

      // Fuzzy matching
      final lowerCategoryName = categoryName.toLowerCase();

      for (final category in categories) {
        final lowerCatName = category.name.toLowerCase();

        if (lowerCatName.contains('ƒÉn') && lowerCategoryName.contains('ƒÉn')) {
          return category.id.toString();
        }
        if (lowerCatName.contains('ph∆∞∆°ng ti·ªán') &&
            (lowerCategoryName.contains('ph∆∞∆°ng ti·ªán') ||
                lowerCategoryName.contains('di chuy·ªÉn'))) {
          return category.id.toString();
        }
        if (lowerCatName.contains('l∆∞u tr√∫') &&
            (lowerCategoryName.contains('l∆∞u tr√∫') ||
                lowerCategoryName.contains('kh√°ch s·∫°n'))) {
          return category.id.toString();
        }
        if (lowerCatName.contains('mua s·∫Øm') &&
            lowerCategoryName.contains('mua s·∫Øm')) {
          return category.id.toString();
        }
        if (lowerCatName.contains('gi·∫£i tr√≠') &&
            lowerCategoryName.contains('gi·∫£i tr√≠')) {
          return category.id.toString();
        }
      }

      // Default fallback - find "Kh√°c" or first category
      final defaultCategory = categories
              .where((cat) => cat.name.toLowerCase().contains('kh√°c'))
              .firstOrNull ??
          categories.firstOrNull;

      if (defaultCategory != null) {
        return defaultCategory.id.toString();
      }

      return null;
    } catch (e) {
      return null;
    }
  }

  /// Test connection ƒë·∫øn backend
  static Future<bool> testConnection() async {
    try {
      final response = await AuthService.dio.get(
        '/ai/health',
        options: Options(
          receiveTimeout: const Duration(seconds: 10),
        ),
      );

      return response.statusCode == 200;
    } catch (e) {
      return false;
    }
  }
}
